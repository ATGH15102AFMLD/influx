import { Context } from "@lib/fx/analisys/Analyzer";
import { IdExprInstruction } from "@lib/fx/analisys/instructions/IdExprInstruction";
import { IdInstruction } from "@lib/fx/analisys/instructions/IdInstruction";
import { ProgramScope } from "@lib/fx/analisys/ProgramScope";
import { IExprInstruction } from "@lib/idl/IInstruction";
import { ISLDocument } from "@lib/idl/ISLDocument";
import { IParseNode } from "@lib/idl/parser/IParser";

import { LGraphNodeAST, LGraphNodeFactory } from "../GraphNode";

function producer(env: () => ISLDocument): LGraphNodeFactory {
    class Node extends LGraphNodeAST {
        static desc = 'Autogenerated particle ID.';
        constructor() {
            super('Part ID');
            this.addOutput('id', 'int');
            this.size = [180, 25];
        }

        evaluate(context: Context, program: ProgramScope, slot: number): IExprInstruction {
            const scope = program.currentScope;
            let sourceNode = null as IParseNode;
            let name = 'partId';
            let decl = scope.findVariable(name);

            if (!decl) {
                this.emitError(`Part ID has not been found.`);
                return null;
            }

            const id = new IdInstruction({ scope, sourceNode, name });
            return new IdExprInstruction({ scope, sourceNode, id, decl });
        }
    }

    return { [`fx/partId`]: Node };
}

export default producer;