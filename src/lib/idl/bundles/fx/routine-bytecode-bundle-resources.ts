// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { UAVBundle, UAVBundleT } from '../fx/u-a-v-bundle';


export class RoutineBytecodeBundleResources {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):RoutineBytecodeBundleResources {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRoutineBytecodeBundleResources(bb:flatbuffers.ByteBuffer, obj?:RoutineBytecodeBundleResources):RoutineBytecodeBundleResources {
  return (obj || new RoutineBytecodeBundleResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRoutineBytecodeBundleResources(bb:flatbuffers.ByteBuffer, obj?:RoutineBytecodeBundleResources):RoutineBytecodeBundleResources {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RoutineBytecodeBundleResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uavs(index: number, obj?:UAVBundle):UAVBundle|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new UAVBundle()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

uavsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRoutineBytecodeBundleResources(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addUavs(builder:flatbuffers.Builder, uavsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uavsOffset, 0);
}

static createUavsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startUavsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRoutineBytecodeBundleResources(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRoutineBytecodeBundleResources(builder:flatbuffers.Builder, uavsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RoutineBytecodeBundleResources.startRoutineBytecodeBundleResources(builder);
  RoutineBytecodeBundleResources.addUavs(builder, uavsOffset);
  return RoutineBytecodeBundleResources.endRoutineBytecodeBundleResources(builder);
}

unpack(): RoutineBytecodeBundleResourcesT {
  return new RoutineBytecodeBundleResourcesT(
    this.bb!.createObjList(this.uavs.bind(this), this.uavsLength())
  );
}


unpackTo(_o: RoutineBytecodeBundleResourcesT): void {
  _o.uavs = this.bb!.createObjList(this.uavs.bind(this), this.uavsLength());
}
}

export class RoutineBytecodeBundleResourcesT {
constructor(
  public uavs: (UAVBundleT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const uavs = RoutineBytecodeBundleResources.createUavsVector(builder, builder.createObjectOffsetList(this.uavs));

  return RoutineBytecodeBundleResources.createRoutineBytecodeBundleResources(builder,
    uavs
  );
}
}
